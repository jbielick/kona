#!/usr/bin/env node --harmony

var exec = require('child_process').exec;
var path = require('path');
var Kona = require(path.join(__dirname, '../'));
var app = new Kona({env: 'production'});
var fs = require('fs');

var PORT = process.env.PORT || 3001;

app.use(function* (next) {
  yield next;
  this.body = 'Hello world';
  this.status = 200;
});

app.initialize().then(function(app) {

  app.listen(PORT);

  var args = [
    'siege',
    '--benchmark',
    '--log=./benchmark/siege.log',
    '--quiet',
    '--concurrent=300',
    '--time=10s',
    'http://localhost:' + PORT + '?foo=bar&baz[qux]=souix'
  ];

  exec(args.join(' '), function(err, stderr, stdout) {
    var contents;
    app.shutdown();
    if (err) {throw err;}
    if (stderr) {console.error(stderr);}
    if (stdout) {
      contents = args.join("\n  ") + "\n\n" + stdout;
      console.log(contents);
      writeToReadme(contents, function() {
        console.log('done');
        process.exit(0);
      });
    }
  });

});

function writeToReadme(bm, cb) {
  var readmePath = path.resolve(__dirname, '../README.md');
  fs.readFile(readmePath, 'utf8', function (err, data) {
    if (err) {return console.log(err); }
    var pattern = /(%benchmarks[\s\S])[\s\S]*([\s\S]%endbenchmarks)/ig;
    if (!pattern.test(data)) { return false; }
    console.log('writing to README.md');
    var replaced = data.replace(pattern, '$1' + bm + '$2');
    fs.writeFile(readmePath, replaced, 'utf8', function (err) {
       if (err) return console.log(err);
       cb && cb();
    });
  });
}